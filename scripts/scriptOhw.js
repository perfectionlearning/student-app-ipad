//============================================================
// Scoring controller
//
// Acts as an intelligent middle-man to the problem state model, which
// is just a dumb data repository.
//
// Rather than duplicating a lot of fields from the problem in the state,
// the state will have access to the problem model.  That is hardly ideal,
// creating an overly tight coupling between the two.  Given that so much
// information is required, and that the score may need to be changed,
// it seems expedient to just do it this way for now.
//
// Controls scoring (points, stars), next/similar question behavior, and text responses
//============================================================
;(function()
{
	// Actions API:
	// TEXT: Display a message.  Parameters: text, color
	// STEPTEXT: Display a message under the last step.  Parameters: text, color
	// GLOBALTEXT: Display a message at the top level, not inside step-by-step (if it's active).  Parameters: text, color
	// NOCHECK: Disable Check (student can't submit another answer until it gets reenabled externally)
	// SOLUTION: Show solution.  Parameter: Solution shown by request (vs. shown for a correct or incorrect answer)
	// NEXT: Next question
	// SIMILAR: Similar question
	// CHOICE: Next or similar question (user choice)
	// NEXTSTEP: Advance to the next step in step-by-step mode
	// LASTSTEP: The last step was completed.
	// REMOVE: Remove this base question from the list, i.e. the user can't work on it anymore
	// FAIL: Increase the failure count
	// FAILOUT: Remove this base question from the list, and mark it as Failed/No Credit
	// SET_STATUS: Set the status indicator.  Parameter: status (New, Correct, Wrong, Locked)
	// STREAK_INC: Streak increased.  Client event (doesn't change the state, which happens elsewhere).
	// STREAK_RESET: Streak reset
	// REWARD: Client event
	// WRONG: Client event
	// LOCK: Immediately fail out of a problem
	// DISABLE_INPUT: deal with last submission of wrong answer.
	// SHOWGRAPH: Display the solution only for graph questions
	// RESTOREINPUT: Reenable input buttons
	// SUBMIT: Use up a submission

	var happyColor = app.style.happyColor;
	var sadColor = app.style.sadColor;
	var defaultColor = app.style.defaultColor;

	var helper = app.scoring.helpers;

	var feedbackText;		// Temp global variable

	var scriptList = {

	//----------------------------------------
	// Generated by submitting a correct answer
	//----------------------------------------

		// Correct
		// Also: Correct, final step in step-by-step mode
		correct: [
			"TEXT", happyColor, function() {
				var cur = helper.pget('score');
				cur = formatScore(cur);
				var max = helper.pget('maxScore');
				max = formatScore(max);
				return "Great work! You get " + cur + " out of " + max + " points.";
			},
			"SET_STATUS", "Correct",
			"REWARD",
			"SHOWGRAPH",
			"NEXT"
		],

		// A single step (not the final step) is correct
		correctStep: [
			"STEPTEXT", happyColor, "That is correct!",
			"REWARD",
//			"SET_STATUS", "Correct",
			"RESTOREINPUT",		// This needs to occur before NEXTSTEP, or the buttons are gone
			"NEXTSTEP"
		],

	//----------------------------------------
	// Generated by submitting a wrong answer
	//----------------------------------------

		// Any wrong answer with submissions remaining
		wrong: [
			"SUBMIT",
			"TEXT", sadColor, "Try again. Check your work or click a help option. Enter a new answer whenever you're ready.",
			"RESTOREINPUT",		// This needs to occur before WRONG or focus can't properly be set
			"WRONG",
			"SET_STATUS", "Wrong"
		],

		wrongLastTry: [
			"SUBMIT",
			"DISABLE_INPUT",
			"TEXT", sadColor, "Your final answer has been submitted. It was incorrect.",
			"WRONG",
			"SET_STATUS", "Locked",
			"SOLUTION", false,
			"NEXT"
		],

		// Only one attempt is allowed for radio inputs
		wrongRadio: [
			"SUBMIT",
			"TEXT", sadColor, "The solution to this problem is shown. You don't get any credit for this problem.",
			"WRONG",
			"SET_STATUS", "Locked",
			"SOLUTION", false,
			"NEXT"
		],

		// Step, wrong answer, first or second time wrong
		wrongStep: [
			"STEPTEXT", sadColor, "Try again. Choose a help option for more hints to solve the problem.",
			"RESTOREINPUT",		// This needs to occur before WRONG or focus can't properly be set
			"WRONG"
//			"SET_STATUS", "Wrong"
		],

		// Step, wrong answer, third time wrong
		wrongStepHelp: [
			"STEPTEXT", sadColor, "It looks like you need to review. Choose a help option for assistance.",
			"RESTOREINPUT",		// This needs to occur before WRONG or focus can't properly be set
			"WRONG",
//			"SET_STATUS", "Wrong",
			"NOCHECK"
		],

	//----------------------------------------
	// Generated by a pending state for problems
	// that require teacher grading.
	//----------------------------------------
		pending: [
			"SUBMIT",		// Is this right?
			"TEXT", defaultColor, "Your answer has been submitted. You will receive a grade as soon as your teacher reviews it.",
			"SET_STATUS", "Pending",
			"NEXT"
		],

	//----------------------------------------
	// Generated by viewing a solution
	//
	// Only available temporarily, for Test mode.
	//----------------------------------------

		// User viewed the solution
		viewSolution: [
			"GLOBALTEXT", sadColor, "Study the solution. You received no credit for this problem.",
			"SET_STATUS", "Locked",
			"SOLUTION", true,
			"SIMILAR"
		],

	//----------------------------------------
	// Incorrect with helpful feedback
	//----------------------------------------
		feedback: [
			"TEXT", sadColor, function() {
				return feedbackText;
			},
			"RESTOREINPUT"
		],

		feedbackStep: [
			"STEPTEXT", sadColor, function() {
				return feedbackText;
			},
			"RESTOREINPUT"
		]
	};

//==========================================================================
// Helpers
//==========================================================================
	//=======================================================
	//
	//=======================================================
	function formatScore(num)
	{
		num = parseFloat(num);
		return parseFloat(num.toFixed(2));
	}

//==========================================================================
// Action/Response Model
//==========================================================================

	//=======================================================
	//=======================================================
	app.scoring.Homework = {
		correct: correctAction,
		correctStep: correctStepAction,
		correctLastStep: correctAction,

		wrong: wrongAction,
		wrongStep: wrongStepAction,
		wrongLastStep: wrongAction,

		pending: pendingAction,
		pendingStep: pendingAction,
		pendingLastStep: pendingAction,

		feedback: feedbackAction,
		feedbackStep: feedbackStepAction,
		feedbackLastStep: feedbackStepAction,

		solution: solutionAction,
	};

	//=======================================================
	// Determines the appropriate action given a correct answer
	//=======================================================
	function correctAction()
	{
		return scriptList.correct;
	}

	//=======================================================
	// Determines the appropriate action given a correct answer (step-by-step mode)
	//=======================================================
	function correctStepAction()
	{
		if (helper.get('curStep') >= (helper.pget('solve').length - 1))
			return correctAction();	// All steps complete -- Use main answer actions
		else
			return scriptList.correctStep;
	}

	//=======================================================
	// Determines the appropriate action given a wrong answer
	//=======================================================
	function wrongAction()
	{
		// Only one attempt is allowed for radio inputs
		if (helper.answerType() === 'radio')
			return scriptList.wrongRadio;

		var submits = helper.pget('submissions')*1 + 1;	// The problem was just submitted.  The submission count is now 1 higher.
		var maxSubs = app.getMaxSubmissions();

		if (submits < maxSubs)
			return scriptList.wrong;
		else
			return scriptList.wrongLastTry;
	}

	//=======================================================
	// The question was answered incorrectly.
	//=======================================================
	function wrongStepAction()
	{
		// Wrong the 3rd time
		// DG: Removed, possibly temporarily
//		if (helper.wrongCnt() % 3 === 0)
//			return scriptList.wrongStepHelp;

		// Default
		return scriptList.wrongStep;
	}

	//=======================================================
	// Determines the appropriate action given a pending state
	// for a submission.
	//=======================================================
	function pendingAction()
	{
		return scriptList.pending;
	}

	//=======================================================
	// This should never be called for online homework.
	// However, the routine is necessary for the API.
	//=======================================================
	function solutionAction()
	{
		return scriptList.viewSolution;
	}

	//=======================================================
	// The answer was incorrect, but we don't count it as
	// wrong. Instead we supply helpful feedback.
	//=======================================================
	function feedbackAction(msg)
	{
		feedbackText = msg;		// Slightly dangerous, but we're not reentrant
		return scriptList.feedback;
	}

	//=======================================================
	// The answer was incorrect, but we don't count it as
	// wrong. Instead we supply helpful feedback.
	//=======================================================
	function feedbackStepAction(msg)
	{
		feedbackText = msg;		// Slightly dangerous, but we're not reentrant
		return scriptList.feedbackStep;
	}

})();
